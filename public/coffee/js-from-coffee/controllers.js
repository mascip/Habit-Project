// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var Habit, SingleResult, app, app_name,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  SingleResult = (function() {
    function SingleResult(_arg) {
      this.day = _arg.day, this.dateTime = _arg.dateTime, this.ticked = _arg.ticked, this.streak = _arg.streak;
    }

    return SingleResult;

  })();

  Habit = (function() {
    function Habit(name, prevResults) {
      this.name = name;
      this.clickTick = __bind(this.clickTick, this);
      this.currentResult = {
        day: moment().startOf('day'),
        dateTime: 0,
        streak: _.first(prevResults).streak,
        ticked: 'unknown'
      };
      this.results = _.clone(prevResults);
      this.results.unshift(_.clone(this.currentResult));
      this.dayIdx = 0;
    }

    Habit.prototype.selectedResult = function() {
      return this.results[this.dayIdx];
    };

    Habit.prototype.ticked = function() {
      return this.selectedResult().ticked;
    };

    Habit.prototype.streak = function() {
      return this.selectedResult().streak;
    };

    Habit.prototype.selectedDay = function() {
      return this.results[this.dayIdx].day;
    };

    Habit.prototype.clickTick = function() {
      this.selectedResult().ticked = (function() {
        switch (false) {
          case this.ticked() !== 'unknown':
            return 'done';
          case this.ticked() !== 'done':
            return 'failed';
          case this.ticked() !== 'failed':
            return 'done';
          default:
            return 'failed';
        }
      }).call(this);
      return this.updateAllStreaks();
    };

    Habit.prototype.updateAllStreaks = function() {
      var i, _i, _ref;
      for (i = _i = _ref = this.results.length - 1; _ref <= 1 ? _i <= 1 : _i >= 1; i = _ref <= 1 ? ++_i : --_i) {
        this.results[i - 1].streak = this.calcStreak(this.results[i - 1].ticked, this.results[i].streak);
      }
      return this.firstResult().streak = this.calcStreak(this.firstResult().ticked, 'unknown');
    };

    Habit.prototype.firstResult = function() {
      return _.last(this.results);
    };

    Habit.prototype.calcStreak = function(tick, prevStreak) {
      switch (false) {
        case tick !== 'unknown':
          return prevStreak;
        case tick !== 'done':
          return this.increaseStreak(prevStreak);
        case tick !== 'failed':
          return this.decreaseStreak(prevStreak);
      }
    };

    Habit.prototype.increaseStreak = function(prevStk) {
      if (prevStk > 0) {
        return prevStk + 1;
      } else {
        return 1;
      }
    };

    Habit.prototype.decreaseStreak = function(prevStk) {
      if (prevStk < 0) {
        return prevStk - 1;
      } else {
        return -1;
      }
    };

    Habit.prototype.clickPrevDay = function() {
      return this.dayIdx++;
    };

    Habit.prototype.clickNextDay = function() {
      return this.dayIdx--;
    };

    Habit.prototype.doesntExistYet = function() {
      return this.dayIdx >= this.results.length;
    };

    return Habit;

  })();

  /* Controllers*/


  app_name = "myApp";

  app = angular.module("" + app_name + ".controllers", []);

  app.controller('myCtrl2', [
    '$scope', function($scope) {
      return $scope.test = 2;
    }
  ]);

  app.controller('CtrlUserBoard', [
    '$scope', function($scope) {
      var createResults, createSingleResult, now, selectedDay, today;
      now = moment();
      today = now.startOf('day');
      selectedDay = moment(today);
      $scope.displayedDay = selectedDay.valueOf();
      $scope.checkboxImages = {
        unknown: "images/unchecked_checkbox.png",
        done: "images/tick-green.png",
        failed: "images/red-cross.png"
      };
      createSingleResult = function(daysAgo, tck, strk) {
        return new SingleResult({
          day: moment().subtract('days', daysAgo).startOf('day'),
          dateTime: moment().subtract('days', daysAgo),
          ticked: tck,
          streak: strk
        });
      };
      createResults = function() {
        var results, resultsArgs;
        resultsArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return results = _.map(resultsArgs, function(args) {
          return createSingleResult.apply(null, args);
        });
      };
      $scope.habits = [new Habit('meditation', createResults([1, 'done', 5], [2, 'done', 4], [3, 'done', 3], [4, 'done', 2], [5, 'done', 1])), new Habit('exercise', createResults([1, 'failed', -2], [2, 'failed', -1], [3, 'done', 8], [4, 'done', 7], [5, 'done', 6], [6, 'done', 5], [7, 'done', 4], [8, 'done', 3], [9, 'done', 2], [10, 'done', 1]))];
      $scope.thisIsToday = function() {
        return selectedDay.isSame(today);
      };
      $scope.clickPrevDay = function() {
        var habit, _i, _len, _ref, _results;
        selectedDay.subtract('days', 1);
        $scope.displayedDay = selectedDay.valueOf();
        _ref = $scope.habits;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          habit = _ref[_i];
          _results.push(habit.clickPrevDay());
        }
        return _results;
      };
      return $scope.clickNextDay = function() {
        var habit, _i, _len, _ref, _results;
        selectedDay.add('days', 1);
        $scope.displayedDay = selectedDay.valueOf();
        _ref = $scope.habits;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          habit = _ref[_i];
          _results.push(habit.clickNextDay());
        }
        return _results;
      };
    }
  ]);

}).call(this);
