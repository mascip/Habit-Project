// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  /* Declare app level module which depends on filters, and services*/

  var app, app_name;

  app_name = "myApp";

  app = angular.module(app_name, ["" + app_name + ".filters", "" + app_name + ".services", "" + app_name + ".directives", "" + app_name + ".ctrl-habit-board", "" + app_name + ".ctrl-tabs", "" + app_name + ".ctrl-my-lab", "" + app_name + ".calendarHabitResults", "" + app_name + ".CalendarDays", "" + app_name + ".TheTime", "" + app_name + ".CheckButton", "angular-underscore", "ui.router"]);

  app.config(function($stateProvider, $urlRouterProvider) {
    var navTabs;
    navTabs = {
      templateUrl: 'app/tabs/tabs.html',
      controller: 'CtrlTabs'
    };
    return $stateProvider.state('myLab', {
      url: '/',
      views: {
        "nav-tabs": navTabs,
        "": {
          templateUrl: 'app/my-lab//myLab.html',
          controller: 'CtrlMyLab'
        }
      }
    }).state('habitBoard', {
      url: '/habit/:name',
      views: {
        "nav-tabs": navTabs,
        "": {
          templateUrl: 'app/habit-board/habitBoard.html',
          controller: 'CtrlHabitBoard'
        }
      }
    });
  });

}).call(this);


// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var CtrlTabs, app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".ctrl-tabs", ['ui.bootstrap']);

  app.controller('CtrlTabs', CtrlTabs = (function() {
    function CtrlTabs($scope, $location, $state) {
      $scope.isActive = function(viewLocation) {
        var res;
        res = $state.includes(viewLocation);
        return res;
      };
    }

    return CtrlTabs;

  })());

}).call(this);


// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var CtrlHabitBoard, app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".ctrl-habit-board", ['ui.bootstrap']);

  app.controller('CtrlHabitBoard', CtrlHabitBoard = (function() {
    function CtrlHabitBoard($scope, $stateParams, MyHabits) {
      var now, today;
      $scope.daysAgo = 0;
      now = moment();
      today = now.startOf('day');
      $scope.displayedToday = today.valueOf();
      $scope.$watch('today', function() {
        return $scope.displayedToday = today.valueOf();
      });
      $scope.selectedDay = moment(today);
      $scope.thisIsToday = $scope.selectedDay.isSame(today);
      $scope.displayedDay = $scope.selectedDay.valueOf();
      $scope.$watch('daysAgo', function() {
        $scope.selectedDay = moment(today).add('days', $scope.daysAgo);
        $scope.displayedDay = $scope.selectedDay.valueOf();
        return $scope.thisIsToday = $scope.selectedDay.isSame(today);
      });
      $scope.habitName = $stateParams.name;
      $scope.myHabits = MyHabits;
      $scope.habit = _.find(MyHabits, function(habit) {
        return habit.name === $scope.habitName;
      });
      $scope.dateChangeIsSelected = 0;
      $scope.wasActive = function(habit) {
        return habit.wasActive($scope.daysAgo);
      };
      $scope.clickPrevWeek = function() {
        return $scope.daysAgo += 7;
      };
      $scope.clickNextWeek = function() {
        return $scope.daysAgo -= 7;
      };
    }

    return CtrlHabitBoard;

  })());

  app.directive('habite', function() {
    return {
      restict: 'E',
      template: '<div>Hi there</div>'
    };
  });

}).call(this);


// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var CtrlMyLab, app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".ctrl-my-lab", ['ui.bootstrap', 'ui.router']);

  app.controller('CtrlMyLab', CtrlMyLab = (function() {
    function CtrlMyLab($scope, $state, ActiveHabit, Habit, MyHabits, TheTime) {
      var today;
      $scope.daysAgo = 0;
      today = TheTime.today();
      $scope.displayedToday = today.valueOf();
      $scope.$watch('today', function() {
        return $scope.displayedToday = today.valueOf();
      });
      $scope.selectedDay = moment(today);
      $scope.displayedDay = $scope.selectedDay.valueOf();
      $scope.$watch('daysAgo', function() {
        $scope.selectedDay = moment(today).add('days', $scope.daysAgo);
        return $scope.displayedDay = $scope.selectedDay.valueOf();
      });
      $scope.allHabits = _.map(['Meditation', 'Exercise', 'Procrastination', 'Get Organized', 'Stay Organized', 'Organize Emails'], function(name) {
        return new Habit(name);
      });
      $scope.myHabits = MyHabits;
      $scope.inputHabitName = void 0;
      $scope.allHabitNames = _.pluck($scope.allHabits, 'name');
      $scope.myHabitNames = _.pluck($scope.myHabits, 'name');
      $scope.otherHabitNames = _.difference($scope.allHabitNames, $scope.myHabitNames);
      $scope.dateChangeIsSelected = 0;
      $scope.clickPrevWeek = function() {
        return $scope.daysAgo += 7;
      };
      $scope.clickNextWeek = function() {
        return $scope.daysAgo -= 7;
      };
      $scope.startedDaysAgo = 0;
      $scope.pickedDate = today.format('YYYY-MM-DD');
      $scope.addOneHabit = function(habitName, nbDaysToInit) {
        if (habitName === void 0 || habitName === '') {
          alert('Defect: a Habit must have a name');
        }
        $scope.myHabits.push(new ActiveHabit(habitName, nbDaysToInit));
        console.log("Habit " + habitName + " added");
        $scope.nowAddingHabit = false;
        $scope.dateChangeIsSelected = 0;
        $scope.startedDaysAgo = 0;
        if (nbDaysToInit > 0) {
          return $state.transitionTo("habitBoard", {
            name: habitName
          });
        }
      };
      $scope.wasActive = function(habit) {
        return habit.wasActive($scope.daysAgo);
      };
    }

    return CtrlMyLab;

  })());

}).call(this);



// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var SingleResult, app, app_name,
    __slice = [].slice;

  app_name = "myApp";

  app = angular.module("" + app_name + ".services", []);

  app.value('version', '0.1');

  SingleResult = (function() {
    function SingleResult(_arg) {
      this.day = _arg.day, this.checkinDateTime = _arg.checkinDateTime, this.ticked = _arg.ticked, this.streak = _arg.streak;
    }

    return SingleResult;

  })();

  app.factory('MyHabits', function(ActiveHabit) {
    var createResults, createSingleResult;
    createSingleResult = function(daysAgo, tck) {
      return new SingleResult({
        day: moment().subtract('days', daysAgo).startOf('day'),
        checkinDateTime: moment().subtract('days', daysAgo),
        ticked: tck,
        streak: 0
      });
    };
    createResults = function() {
      var results, resultsArgs;
      resultsArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return results = _.map(resultsArgs, function(args) {
        return createSingleResult.apply(null, args);
      });
    };
    return [new ActiveHabit('Meditation', 0, createResults([1, 'done'], [2, 'done'], [3, 'done', 3], [4, 'done', 2], [5, 'done', 1])), new ActiveHabit('Exercise', 0, createResults([1, 'failed'], [2, 'failed'], [3, 'done'], [4, 'done'], [5, 'done'], [6, 'done'], [7, 'done'], [8, 'done'], [9, 'done'], [10, 'failed'], [11, 'done'], [12, 'done'], [13, 'done'], [14, 'done'], [15, 'done'], [16, 'done'], [17, 'done'], [18, 'done'], [19, 'done'], [20, 'done'], [21, 'done'], [22, 'done'], [23, 'done'], [24, 'done']))];
  });

  app.factory('Habit', function() {
    var Habit;
    return Habit = (function() {
      function Habit(name) {
        this.name = name;
      }

      return Habit;

    })();
  });

  app.factory('ActiveHabit', function(Habit, TheTime) {
    var ActiveHabit;
    return ActiveHabit = (function() {
      function ActiveHabit(name, nbDaysToInit, prevResults) {
        var currentStreak, emptyHabit;
        if (nbDaysToInit == null) {
          nbDaysToInit = 0;
        }
        if (prevResults == null) {
          prevResults = [];
        }
        this.habit = new Habit(name);
        this.name = this.habit.name;
        this.results = _.clone(prevResults);
        this.addOneUnknownResult = function(day, prevStreak) {
          var unknownResult;
          if (day == null) {
            day = TheTime.today();
          }
          if (prevStreak == null) {
            prevStreak = 0;
          }
          unknownResult = {
            day: day,
            checkinDateTime: 0,
            streak: prevStreak,
            ticked: 'unknown'
          };
          return this.results.unshift(unknownResult);
        };
        this.addUnknownResults = function(nbDays, lastDay, prevStreak) {
          var daysAgo, theDay, _i, _results;
          if (nbDays == null) {
            nbDays = 0;
          }
          if (lastDay == null) {
            lastDay = TheTime.today();
          }
          if (prevStreak == null) {
            prevStreak = 0;
          }
          _results = [];
          for (daysAgo = _i = 0; 0 <= nbDays ? _i <= nbDays : _i >= nbDays; daysAgo = 0 <= nbDays ? ++_i : --_i) {
            theDay = moment(lastDay).subtract(daysAgo, 'days');
            _results.push(this.addOneUnknownResult(theDay, prevStreak));
          }
          return _results;
        };
        emptyHabit = prevResults.length === 0;
        if (nbDaysToInit > 0 && !emptyHabit) {
          alert("Defect: to create a Habit, it must either have previous results, or past days to initialize; not both");
        }
        currentStreak = emptyHabit ? 0 : _.first(prevResults).streak;
        this.addUnknownResults(nbDaysToInit);
        this.updateAllStreaks();
        this.dayIdx = 0;
      }

      ActiveHabit.prototype.allStreaks = function() {
        return _.map(this.results, function(res) {
          return res.streak;
        });
      };

      ActiveHabit.prototype.longestStreak = function() {
        return _.max(this.allStreaks());
      };

      ActiveHabit.prototype.streakAgo = function(daysAgo) {
        return this.results[daysAgo].streak;
      };

      ActiveHabit.prototype.tickedAgo = function(daysAgo) {
        if (this.doesntExistAgo(daysAgo) || daysAgo < 0) {
          return 'unknown';
        }
        return this.results[daysAgo].ticked;
      };

      ActiveHabit.prototype.tickedOnDay = function(day) {
        return this.tickedAgo(TheTime.wasAgo(day));
      };

      ActiveHabit.prototype.nbDaysSinceStart = function() {
        return this.results.length;
      };

      ActiveHabit.prototype.nbWeeksStarted = function(daysAgo) {
        if (daysAgo == null) {
          daysAgo = 0;
        }
        return Math.ceil((this.nbDaysSinceStart() - daysAgo) / 7);
      };

      ActiveHabit.prototype.nbDaysInWeek = function(weekNum) {
        return Math.min(7, this.nbDaysSinceStart() - 7 * weekNum);
      };

      ActiveHabit.prototype.nbWeeksToDisplay = function(daysAgo) {
        if (daysAgo == null) {
          daysAgo = 0;
        }
        return Math.min(2, this.nbWeeksStarted(daysAgo));
      };

      ActiveHabit.prototype.resultsOfWeek = function(weekNum) {
        return weekNum;
      };

      ActiveHabit.prototype.startingDay = function() {
        return TheTime.today().subtract(this.nbDaysSinceStart() - 1, 'days');
      };

      ActiveHabit.prototype.inactiveOnDay = function(day) {
        return day.isBefore(this.startingDay()) || day.isAfter(TheTime.today());
      };

      ActiveHabit.prototype.activeOnDay = function(day) {
        return !this.inactiveOnDay(day);
      };

      ActiveHabit.prototype.clickTickAgo = function(daysAgo) {
        var ticked;
        ticked = this.tickedAgo(daysAgo);
        this.results[daysAgo].ticked = (function() {
          switch (false) {
            case ticked !== 'unknown':
              return 'done';
            case ticked !== 'done':
              return 'failed';
            case ticked !== 'failed':
              return 'done';
            default:
              return 'failed';
          }
        })();
        return this.updateAllStreaks();
      };

      ActiveHabit.prototype.clickTickOnDay = function(day) {
        return this.clickTickAgo(TheTime.wasAgo(day));
      };

      ActiveHabit.prototype.emptyHabit = function() {
        return this.results.length === 0;
      };

      ActiveHabit.prototype.emptyHabit = function() {
        return this.results.length === 0;
      };

      ActiveHabit.prototype.updateAllStreaks = function() {
        var i, _i, _ref;
        if (!this.emptyHabit()) {
          this.firstResult().streak = this.calcStreak(this.firstResult().ticked, 0);
          if (this.results.length > 1) {
            for (i = _i = _ref = this.results.length - 2; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
              this.results[i].streak = this.calcStreak(this.results[i].ticked, this.results[i + 1].streak);
            }
          }
        }
        return this.countAllResults();
      };

      ActiveHabit.prototype.countAllResults = function() {
        var res, _base, _i, _len, _ref;
        this.countResults = _.countBy(this.results, function(result) {
          return result.ticked;
        });
        _ref = ['unknown', 'done', 'fail'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          res = _ref[_i];
          (_base = this.countResults)[res] || (_base[res] = 0);
        }
        this.countResults.total = this.results.length - this.countResults['unknown'];
        return this.percentSuccess = this.countResults.done / this.countResults.total * 100;
      };

      ActiveHabit.prototype.firstResult = function() {
        return _.last(this.results);
      };

      ActiveHabit.prototype.calcStreak = function(tick, prevStreak) {
        switch (false) {
          case tick !== 'unknown':
            return prevStreak;
          case tick !== 'done':
            return this.increaseStreak(prevStreak);
          case tick !== 'failed':
            return this.decreaseStreak(prevStreak);
        }
      };

      ActiveHabit.prototype.increaseStreak = function(prevStk) {
        if (prevStk > 0) {
          return prevStk + 1;
        } else {
          return 1;
        }
      };

      ActiveHabit.prototype.decreaseStreak = function(prevStk) {
        if (prevStk < 0) {
          return prevStk - 1;
        } else {
          return -1;
        }
      };

      ActiveHabit.prototype.doesntExistAgo = function(daysAgo) {
        return daysAgo >= this.results.length;
      };

      ActiveHabit.prototype.doesntExistOnDay = function(day) {
        return doesntExistAgo(TheTime.wasAgo(day));
      };

      ActiveHabit.prototype.wasActive = function(daysAgo) {
        return daysAgo < this.results.length;
      };

      return ActiveHabit;

    })();
  });

}).call(this);



// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  /* Filters*/

  var app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".filters", []);

  app.filter('interpolate', [
    'version', function(version) {
      return function(text) {
        return String(text).replace(/\%VERSION\%/mg, version);
      };
    }
  ]);

}).call(this);



// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  /* Filters*/

  var app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".filters", []);

  app.filter('interpolate', [
    'version', function(version) {
      return function(text) {
        return String(text).replace(/\%VERSION\%/mg, version);
      };
    }
  ]);

}).call(this);



// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".CalendarDays", []);

  app.factory('CalendarDays', function(TheTime) {
    var CalendarDays;
    return CalendarDays = (function() {
      function CalendarDays(month, year) {
        var dayOneOfTheMonth, firstDayOfCal, _i, _ref, _results;
        this.nbWeeks = 6;
        dayOneOfTheMonth = moment("" + month + "-01-" + year);
        firstDayOfCal = moment(dayOneOfTheMonth).weekday(0);
        this.weeks = _.map((function() {
          _results = [];
          for (var _i = 1, _ref = this.nbWeeks; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this), function(weekNum) {
          var _j, _ref1, _ref2, _results1;
          return _.map((function() {
            _results1 = [];
            for (var _j = _ref1 = 7 * (weekNum - 1), _ref2 = 7 * weekNum - 1; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; _ref1 <= _ref2 ? _j++ : _j--){ _results1.push(_j); }
            return _results1;
          }).apply(this), function(num) {
            return moment(firstDayOfCal).add(num, 'days');
          });
        });
      }

      return CalendarDays;

    })();
  });

}).call(this);



// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".calendarHabitResults", []);

  app.directive('calendarHabitResults', function(CalendarDays, TheTime) {
    return {
      restrict: 'E',
      templateUrl: 'app/components/calendar/calendar.html',
      replace: true,
      link: function(scope, element, attrs) {
        var calDays;
        scope.today = TheTime.today();
        scope.monthName = TheTime.monthName;
        scope.year = TheTime.year;
        calDays = new CalendarDays(TheTime.month, scope.year);
        scope.nbWeeks = calDays.nbWeeks;
        scope.daysInWeek = calDays.weeks;
        return scope.dayNumInWeek = _.map(scope.daysInWeek, function(week) {
          return _.map(week, function(day) {
            return day.date();
          });
        });
      }
    };
  });

}).call(this);



// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".CheckButton", []);

  app.directive('checkButton', function() {
    return {
      restrict: 'E',
      templateUrl: 'app/components/check-button/checkButton.html',
      replace: true,
      scope: {
        ticked: '=',
        actionWhenClicked: '&',
        disabl: '='
      },
      link: function(scope, elem, attrs) {
        var modifyTick;
        scope.disab = function() {
          if (scope.disabl) {
            return 'disabled';
          } else {
            return '';
          }
        };
        modifyTick = function() {
          return scope.ticked = (function() {
            switch (false) {
              case scope.ticked !== 'unknown':
                return 'done';
              case scope.ticked !== 'done':
                return 'failed';
              case scope.ticked !== 'failed':
                return 'done';
              default:
                return 'failed';
            }
          })();
        };
        return scope.clickedTheTick = function() {
          return scope.actionWhenClicked();
        };
      }
    };
  });

}).call(this);



// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".TheTime", []);

  app.service('TheTime', function() {
    this.now = function() {
      return moment();
    };
    this.today = function() {
      return this.now().startOf('day');
    };
    this.month = this.today().month() + 1;
    this.monthName = this.today().format('MMMM');
    this.year = this.today().year();
    this.sayDay = function(day) {
      return day.format("dddd, MMMM Do YYYY, h:mm:ss a");
    };
    this.wasAgo = function(day) {
      return this.today().diff(day, 'days');
    };
    return this.isToday = function(day) {
      return day.isSame(this.today());
    };
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  /* Directives*/

  var app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".directives", []);

  app.directive('appVersion', [
    'version', function(version) {
      return function(scope, element, attrs) {
        return element.text(version);
      };
    }
  ]);

  app.directive('ngTap', function() {
    return function(scope, element, attrs) {
      var tapping;
      tapping = false;
      element.bind('touchstart', stoppingPropagation(function(event) {
        return tapping = true;
      }));
      element.bind('touchmove', stoppingPropagation(function(event) {
        return tapping = false;
      }));
      return element.bind('touchend', stoppingPropagation(function(event) {
        if (tapping) {
          return scope.$apply(attrs['ngTap']);
        }
      }));
    };
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  /* Filters*/

  var app, app_name;

  app_name = "myApp";

  app = angular.module("" + app_name + ".filters", []);

  app.filter('interpolate', [
    'version', function(version) {
      return function(text) {
        return String(text).replace(/\%VERSION\%/mg, version);
      };
    }
  ]);

}).call(this);
