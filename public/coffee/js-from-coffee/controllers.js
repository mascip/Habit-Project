// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var Habit, SingleResult, app, app_name,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SingleResult = (function() {
    function SingleResult(_arg) {
      this.day = _arg.day, this.dateTime = _arg.dateTime, this.ticked = _arg.ticked, this.streak = _arg.streak;
    }

    return SingleResult;

  })();

  Habit = (function() {
    function Habit(name, prevResults) {
      this.name = name;
      this.prevResults = prevResults;
      this.clicked = __bind(this.clicked, this);
      this.selectedResult = {
        day: moment().startOf('day'),
        dateTime: 0,
        streak: this.prevResults[0].streak,
        ticked: 0
      };
      this.nextResults = [];
      this.allTicked = _.pluck(this.allResults(), 'ticked');
    }

    Habit.prototype.prevStreak = function() {
      return this.prevResults[0].streak;
    };

    Habit.prototype.clicked = function() {
      var tickedOld;
      tickedOld = this.selectedResult.ticked;
      this.selectedResult.ticked = (tickedOld + 1) % 3;
      return this.selectedResult.streak = (function() {
        switch (false) {
          case tickedOld !== 1:
            return this.increaseStreak();
          case tickedOld !== 2:
            return this.decreaseStreak();
          default:
            return this.prevStreak();
        }
      }).call(this);
    };

    Habit.prototype.increaseStreak = function() {
      if (this.prevStreak() > 1) {
        return this.prevStreak() + 1;
      } else {
        return 1;
      }
    };

    Habit.prototype.decreaseStreak = function() {
      if (this.prevStreak() < 0) {
        return this.prevStreak() - 1;
      } else {
        return -1;
      }
    };

    Habit.prototype.selectPrevDay = function() {
      this.nextResults.unshift(this.selectedResult);
      return this.selectedResult = this.prevResults.shift();
    };

    Habit.prototype.selectNextDay = function() {
      this.nextResults.unshift(this.selectedResult);
      return this.selectedResult = this.prevResults.shift();
    };

    Habit.prototype.allResults = function() {
      var allR;
      allR = [this.selectedResult];
      if (this.prevResults.length) {
        allR = this.prevResults.concat(allR);
      }
      if (this.nextResults.length) {
        allR = allR.concat(this.nextResults);
      }
      return allR;
    };

    return Habit;

  })();

  /* Controllers*/


  app_name = "myApp";

  app = angular.module("" + app_name + ".controllers", []);

  app.controller('myCtrl2', [
    '$scope', function($scope) {
      return $scope.test = 2;
    }
  ]);

  app.controller('CtrlUserBoard', [
    '$scope', function($scope) {
      var now, selectedDay;
      now = moment();
      selectedDay = now.startOf('day');
      $scope.displayedDay = selectedDay.valueOf();
      $scope.checkboxImages = ["images/unchecked_checkbox.png", "images/tick-green.png", "images/red-cross.png"];
      $scope.habits = [
        new Habit('meditation', [
          new SingleResult({
            day: moment().subtract('days', 1).startOf('day'),
            dateTime: moment().subtract('days', 1),
            ticked: 1,
            streak: 5
          }), new SingleResult({
            day: moment().subtract('days', 2).startOf('day'),
            dateTime: moment().subtract('days', 2),
            ticked: 1,
            streak: 4
          }, new SingleResult({
            day: moment().subtract('days', 3).startOf('day'),
            dateTime: moment().subtract('days', 3),
            ticked: 1,
            streak: 3
          }))
        ]), new Habit('exercise', [
          new SingleResult({
            day: moment().subtract('days', 1).startOf('day'),
            dateTime: moment().subtract('days', 1),
            ticked: 2,
            streak: -1
          }), new SingleResult({
            day: moment().subtract('days', 2).startOf('day'),
            dateTime: moment().subtract('days', 2),
            ticked: 1,
            streak: 28
          }, new SingleResult({
            day: moment().subtract('days', 3).startOf('day'),
            dateTime: moment().subtract('days', 3),
            ticked: 1,
            streak: 27
          }))
        ])
      ];
      return $scope.selectPrevDay = function() {
        var habit, _i, _len, _ref, _results;
        selectedDay.subtract('days', 1);
        $scope.displayedDay = selectedDay.valueOf();
        _ref = $scope.habits;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          habit = _ref[_i];
          _results.push(habit.selectPrevDay());
        }
        return _results;
      };
    }
  ]);

}).call(this);
